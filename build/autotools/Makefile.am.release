# To make real stable releases or devel snapshots, use either:
# 	make release-check
# or	make release-publish

TAR_OPTIONS = --owner=0 --group=0

GNOME_RELEASE_URL_BASE = http://download.gnome.org/sources/pinpoint
GNOME_RELEASE_URL      = $(GNOME_RELEASE_URL_BASE)/$(PINPOINT_MAJOR_VERSION).$(PINPOINT_MINOR_VERSION)

RELEASE_ANNOUNCE_LIST = clutter-announce@clutter-project.org (Cc: gnome-announce-list@gnome.org)

tar_file = $(distdir).tar.xz
sha256_file = $(distdir).sha256sum

$(sha256_file): $(tar_file)
	$(AM_V_GEN)sha256sum $^ > $@

release-check: release-verify-even-micro release-verify-news
	TAR_OPTIONS="$(TAR_OPTIONS)" $(MAKE) $(AM_MAKEFLAGS) distcheck

release-verify-news:
	@echo -n "Checking that the NEWS file has been updated..."
	@if ! grep -q "$(PINPOINT_VERSION)" $(top_srcdir)/NEWS; then \
	  (echo "Ouch." && \
	   echo "The version in the NEWS file does not match $(PINPOINT_VERSION)." && \
	   echo "This probably means you haven't updated the NEWS file." && \
	   false); else :; fi
	@echo "Good."

release-verify-even-micro:
	@echo -n "Checking that $(VERSION) has an even micro component..."
	@test "$(PINPOINT_MICRO_VERSION)" = "`echo $(PINPOINT_MICRO_VERSION)/2*2 | bc`" \
	  || (echo "Ouch." && \
	      echo "The version micro component '$(PINPOINT_MICRO_VERSION)' is not an even number." && \
	      echo "The version in configure.ac must be incremented before a new release." && \
	      false)
	@echo "Good."

release-upload: $(sha256_file)
	@echo "Uploading to master.gnome.org..."
	@scp $(tar_file) llandwerlin@master.gnome.org:
	@echo "Running ftpadmin install..."
	@ssh llandwerlin@master.gnome.org ftpadmin install $(tar_file)
	@echo "Done."

release-message: $(sha256_file)
	@echo "Send an email to: $(RELEASE_ANNOUNCE_LIST)"
	@echo "  Subject: $(PACKAGE) $(PINPOINT_VERSION) ($(PINPOINT_RELEASE_STATUS))"
	@echo "Contents:"
	@echo "--- CUT HERE ---"
	@echo "Hi,"
	@echo ""
	@echo "A new $(PACKAGE) $(PINPOINT_RELEASE_STATUS) is now available at:"
	@echo ""
	@echo "  $(GNOME_RELEASE_URL)/$(tar_file)"
	@echo ""
	@echo "SHA256 Checksum:"
	@echo ""
	@cat $(top_builddir)/$(sha256_file)
	@echo ""
	@echo "Additionally, a git clone of the source tree:"
	@echo ""
	@echo "  git clone git://git.gnome.org/pinpoint"
	@echo ""
	@echo "will include a signed $(PINPOINT_VERSION) tag which points to a commit named:"
	@echo "  `git cat-file tag $(PINPOINT_VERSION) | grep ^object | $(SED) -e 's,object ,,'`"
	@echo ""
	@echo "which can be verified with:"
	@echo "  git verify-tag $(PINPOINT_VERSION)"
	@echo ""
	@echo "and can be checked out with a command such as:"
	@echo "  git checkout -b build $(PINPOINT_VERSION)"
	@echo ""
	@echo "Pinpoint a simple presentation tool that hopes to avoid audience death by"
	@echo "bullet point and instead encourage presentations containing beautiful images"
	@echo "and small amounts of concise text in slides."
	@echo ""
	@echo "Changes:"
	@echo ""
	@$(SED) -n '1bend;/^Pinpoint /q;:end;4,$$p' $(top_srcdir)/NEWS
	@echo "--- CUT HERE ---"

release-publish: release-check
	$(MAKE) $(AM_MAKEFLAGS) release-upload
	$(MAKE) $(AM_MAKEFLAGS) release-message

.PHONY: \
	release-check \
	release-message \
	release-publish \
	release-upload \
	release-verify-even-micro
